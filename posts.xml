<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Osvaldo Barrera</title>
    <description>Software developer. Tech geek. Food lover.</description>
    <link>https://hugo.barrera.io/</link>
    <atom:link href="https://hugo.barrera.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 01 Oct 2019 19:08:13 +0000</pubDate>
    <lastBuildDate>Tue, 01 Oct 2019 19:08:13 +0000</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Spotify review</title>
        <description>&lt;p&gt;Since copying music to my iPhone is a bit of pain, I decided to stop being a
dinosaur, and get into this new world of on-demand music streaming.&lt;/p&gt;

&lt;p&gt;Regrettably, it seems that these services are really below alpha quality - and
amazingly, manage to have millions of customers anyway (but hey, stuff is
frequently made popular due to marketing and not due to good quality).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;spotify-website&quot;&gt;Spotify website&lt;/h2&gt;

&lt;p&gt;The website is so riddled with bugs it’s incredible. Here’s one:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create account A&lt;/li&gt;
  &lt;li&gt;Logout&lt;/li&gt;
  &lt;li&gt;Visit the registration page, and create account B&lt;/li&gt;
  &lt;li&gt;You’re now signed into account A!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I managed to reproduce this several times, and it keeps on happening.&lt;/p&gt;

&lt;p&gt;Also, if you create an account using Facebook, it’ll assign an erroneous email
which you can’t change. For me, it used “hugo@osvaldobarrera.com.ar”. While
it’s true that this was my email lots of years back, it’s not even present in
Facebook. I actually created my Facebook profile &lt;em&gt;after&lt;/em&gt; that email died, so
I’ve no idea where Spotify got it from.&lt;/p&gt;

&lt;p&gt;There’s also lots of localization errors. It seems Spotify’s entire i18n system
is completely broken, and will often render different bits of the same page in
different languages.&lt;/p&gt;

&lt;p&gt;I ignored these errors (and many others that I honestly don’t recall so won’t
mention here) and proceded to try it anyway, because I felt quite generous.&lt;/p&gt;

&lt;h2 id=&quot;the-web-based-player&quot;&gt;The web-based player&lt;/h2&gt;

&lt;p&gt;The web-player is pretty much a dead end unless you live in 2009. It requires
that you install the ancient flash player. No HTML5 support, for some reason
that’s beyond me.&lt;/p&gt;

&lt;p&gt;This reminds me of Grooveshark, which had an HTML5 player, but regrettably, it
died.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2017-05-22&lt;/strong&gt;:&lt;br /&gt;
Looks like Spotify’s web player can now use Widevine, a DRM
plug-in compatible with major browsers/platforms. Still no luck if you don’t
use one of those, and still DRM-tied, but there’s a chance.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-desktop-app&quot;&gt;The desktop app&lt;/h2&gt;

&lt;p&gt;The desktop app is buggy as hell. It too had localization errors were I’d see
screens in multiple languages.&lt;/p&gt;

&lt;p&gt;More importantly though, the search does not work, so you can’t find tracks.
That’s as much as a dead end as it gets.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/journal/2016-11-29-spotify-review/search-error.png&quot; alt=&quot;A screenshot of the search error.&quot; /&gt;
  &lt;figcaption&gt;
    I tried the app in different systems, and the results are consistently the
    same.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There’s also a huge bar on the right hand side of the screen to link Spotify
with Facebook. If you don’t use or care for Facebook, it’ll stay there, taking
up space uselessly, with no “hide” button.&lt;/p&gt;

&lt;h2 id=&quot;the-mobile-app&quot;&gt;The mobile app&lt;/h2&gt;

&lt;p&gt;Even after all the above issues, I decided I’d try the mobile app. I usually
give up fast, but for some reason, I went on.&lt;/p&gt;

&lt;p&gt;The mobile app &lt;em&gt;also&lt;/em&gt; has localization issues, with different bits of the UI in
different languages.&lt;/p&gt;

&lt;figure class=&quot;narrow&quot;&gt;
  &lt;img src=&quot;/images/journal/2016-11-29-spotify-review/sign-up.png&quot; alt=&quot;The sign up page showing an error in a different language.&quot; /&gt;
  &lt;figcaption&gt;
    It pisses me that my user name was used, but that's not actually a bug.
    &lt;br /&gt;
    It'd be nice if the error was in the same language as the rest of the
    screen though.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;narrow&quot;&gt;
  &lt;img src=&quot;/images/journal/2016-11-29-spotify-review/mixed-languages.png&quot; alt=&quot;A screen mostly in english, except for a title in spanish..&quot; /&gt;
  &lt;figcaption&gt;
    More mixed languages.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I tried to play a track. “Bohemian Rhapsody”. Search worked, but when I tried
to play it, Spotify would just play &lt;em&gt;random&lt;/em&gt; music by the same artists, not the
track I picked. Selecting a track requires a premium account (so, basically,
free accounts can only listen to random stuff).&lt;/p&gt;

&lt;figure class=&quot;narrow&quot;&gt;
  &lt;img src=&quot;/images/journal/2016-11-29-spotify-review/premium-required.png&quot; alt=&quot;A screen explaining that only premium users can select tracks.&quot; /&gt;
  &lt;figcaption&gt;
    The &quot;only premium users can choose what they listen to&quot; is actually
    documented.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The language issues continue:&lt;/p&gt;

&lt;figure class=&quot;narrow&quot;&gt;
  &lt;img src=&quot;/images/journal/2016-11-29-spotify-review/premium-in-spanish.png&quot; alt=&quot;A screen showing I need a premium account - in spanish..&quot; /&gt;
  &lt;figcaption&gt;
    I need a premium account for this. In Spanish.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;narrow&quot;&gt;
  &lt;img src=&quot;/images/journal/2016-11-29-spotify-review/premium-in-english.png&quot; alt=&quot;A screen stating I've activated premium mode - in english.&quot; /&gt;
  &lt;figcaption&gt;
    Okay, I activated my &quot;7 day free trail&quot;. The trail is in English. Maybe
    proper i18n is only for premium users?
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So, now that I can finally actually play music, there’s a larger issue. Opening
any album only has a huge “shuffle” button. There’s no clear way to play it in
order (and some albums make no sense shuffled, why would anyone have this
chaotic default is beyond me).&lt;/p&gt;

&lt;p&gt;It &lt;a href=&quot;https://community.spotify.com/t5/iOS-iPhone-iPad/How-to-Disable-Shuffle-Play-on-the-iPhone/td-p/993199&quot;&gt;seems that&lt;/a&gt; there’s actually no way to disable this insane
behaviour, but taping on the first track will start playing it, and play the
rest in order. However, there’s a catch. Adding other stuff to the queue plays
it immediately after the selected track, overriding the rest of the initial
album.&lt;br /&gt;
The workaround is adding a track, then its album, then deleting the duped first
track, and then adding more stuff. Ugh, horrible.&lt;/p&gt;

&lt;p&gt;I also discovered that the iPhone app can remote-control the desktop app, so
it’s possible to play music in the desktop version, even if its search is
non-functional.&lt;/p&gt;

&lt;p&gt;Note: My iPhone is configured in English (UK). Siri as well.  Everything
everywhere is set to English.&lt;/p&gt;

&lt;h2 id=&quot;collection&quot;&gt;Collection&lt;/h2&gt;

&lt;p&gt;Spotify’s collection is pretty large. About four out of every five
albums/tracks I’ve looked for were there.&lt;/p&gt;

&lt;p&gt;There’s a button on the desktop app to link a local folder and listen music
from it. Clicking the button does nothing, regrettably.&lt;/p&gt;

&lt;h2 id=&quot;cost&quot;&gt;Cost&lt;/h2&gt;

&lt;p&gt;The price varies substantially from region to region, but is relatively cheap
where I live. YMMV.&lt;/p&gt;

&lt;p&gt;There’s also an offer with a 86% (yes, eighty six percent!) discount the first
three months, which probably helps you get hooked at a very cheap price and
then forget that you’re paying for it.&lt;/p&gt;

&lt;p&gt;Finally, if you and your family members live together, you only need to pay 21%
of the total price each (being six members). Sadly, the terms and conditions
specify that it’s &lt;em&gt;only&lt;/em&gt; for family members that live under the same household.&lt;/p&gt;

&lt;p&gt;Live in separate households? Share your household with friends? Not included.
I’m not sure how this applies unmarried couples.&lt;/p&gt;

&lt;p&gt;In any case, I’m pretty sure that lots of families will ignore this, especially
since it’s in very small print, and it’s impossible to enforce.&lt;/p&gt;

&lt;h2 id=&quot;veredict&quot;&gt;Veredict&lt;/h2&gt;

&lt;p&gt;The only thing that’s actually usable is the mobile app, if you’re willing to
pay. All the rest is garbage, and free accounts make no sense, since you can’t
pick what you listen to.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 11:23:59 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2016/11/29/spotify-review/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2016/11/29/spotify-review/</guid>
        
        <category>review</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Using FreeOTP with Battle.net</title>
        <description>&lt;p&gt;Some battlet.net users &lt;a href=&quot;http://us.battle.net/forums/en/bnet/topic/12188259158&quot;&gt;have requested&lt;/a&gt;, over and over to use other
apps as a battle.net 2FA. These include FreeOTP, Authy, and possible others
(Google Authenticator, AFAIK, cannot be used since it lacks the ability to
configure the amount of digits).&lt;/p&gt;

&lt;p&gt;After some searching the web, I found out all the pieces of the puzzle are out
there, but nobody built it entirely, so here goes!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;First of all, install &lt;code class=&quot;highlighter-rouge&quot;&gt;bna&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;. AFAIK, &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; should be
part of the base OS in just about any OS/distro except windows. On windows,
you’ll have to download and install &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;python&lt;/a&gt; (the latest version is
fine).:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install bna
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, generate a new authenticator:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bna --new
Success. Your new serial is: US-1611-2467-4116 06184679
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visit the &lt;a href=&quot;https://us.battle.net/account/management/authenticator.html&quot;&gt;authenticator page&lt;/a&gt; at battle.net, and like the new
authenticator using the provided serial. Obviously, don’t copy the above, but
the output of your own.&lt;/p&gt;

&lt;p&gt;Now to link that to your phone! You can get all the information via the CLI:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bna --otpauth-url
otpauth://totp/Battle.net:US161124674088:?secret=KMN3RTIFHLNDEMIHDIVXVGXK2GB33VW5&amp;amp;issuer=Battle.net&amp;amp;digits=8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;US161124674088&lt;/code&gt; is the generated serial. You &lt;em&gt;may&lt;/em&gt; want to store it
somewhere very safe for posterity’s sake, but it’s not really that
important (I think).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KMN3RTIFHLNDEMIHDIVXVGXK2GB33VW5&lt;/code&gt; is your actual secret. You’ll need to
provide this to FreeOTP (or whatever you’re using).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;digits=8&lt;/code&gt; indicates that your authenticator app should always generate 8
digits. This &lt;em&gt;MUST&lt;/em&gt; be set to 8 or it won’t work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve &lt;code class=&quot;highlighter-rouge&quot;&gt;qrencode&lt;/code&gt; installed, you can also run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bna --otpauth-url | qrencode -o ~/BNA-qrcode.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will generate a QR code which you can scan in your home. I tried to scan
it, but FreeOTP didn’t generate anything for me. Not sure if it’s a glitch or
what.&lt;/p&gt;

&lt;p&gt;That it! Just a reminder, &lt;em&gt;keep your secret and serial numbers secret&lt;/em&gt; anyone
who has access to these can basically spoof your 2FA codes!&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Nov 2016 23:00:34 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2016/11/23/using-freeotp-with-battlenet/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2016/11/23/using-freeotp-with-battlenet/</guid>
        
        <category>security</category>
        
        <category>battle.net</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Using letsencrypt with HKPK</title>
        <description>&lt;p&gt;HKPK (&lt;a href=&quot;https://tools.ietf.org/html/rfc7469&quot;&gt;RFC7469&lt;/a&gt;) is a standard that tells browser to cache a certain
TLS certificate’s signature, and validate that future visits use that
certificate (or a defined backup).&lt;/p&gt;

&lt;p&gt;I intended on enabling this on my servers, but since letsencrypt renews your
certificates every few months, it would mean updating this setting on my nginx
configuration. It also means that if something catastrophic happens (like a
disk failure), the certificate would be lost, but browsers would still expect
to see that same one.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;After some quick searching, I didn’t find anything in letsencrypt’s docs on how
to quickly do this.&lt;/p&gt;

&lt;p&gt;The solution is merely to pin the root certificates - or the intermediate ones.&lt;/p&gt;

&lt;p&gt;Pinning the intermediate one (and the backup intermediate certificate) seem
like a good compromise: There’s no need to update anything upon renewals, but
in case of lost certificates, there would be no issue using new ones.&lt;/p&gt;

&lt;p&gt;To do this, I tailored the  Public-Key-Pins header on my server (in my case,
nginx) sends.&lt;/p&gt;

&lt;p&gt;You can copy-paste these into nginx’s settings if that’s what you’re using:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Public-Key-Pins 'pin-sha256=&quot;YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=&quot;; pin-sha256=&quot;sRHdihwgkaib1P1gxX8HFszlD+7/gTfNvuAybgLPNis=&quot;; max-age=5184000; includeSubDomains';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This also sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; to six months, which is generally a good
compromise.&lt;/p&gt;

&lt;p&gt;I you don’t want to copy-paste security-related settings from a random website,
you can get these hashes yourself.&lt;/p&gt;

&lt;p&gt;First of all, grab letsencrypt’s &lt;a href=&quot;https://letsencrypt.org/certificates/&quot;&gt;intermediate certificates&lt;/a&gt;.
Once you have them, you need to get the key’s SHA256 hash (do this for both):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl x509 -noout -in lets-encrypt-x1-cross-signed.pem -pubkey | \
openssl rsa -pubin -outform der | \
openssl dgst -sha256 -binary | \
base64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that these are the same hashes in the above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Public-Key-Pins 'pin-sha256=&quot;HASH1=&quot;; pin-sha256=&quot;HASH2&quot;; max-age=5184000; includeSubDomains';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now tell nginx to reload your settings, and you’re done. Visitors for you
domain will pin the intermediate certificate for six months, blocking any MITMs
done with rogue certificates, etc.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Feb 2016 21:15:40 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2016/02/07/using-letsencrypt-and-hkpk/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2016/02/07/using-letsencrypt-and-hkpk/</guid>
        
        <category>tls</category>
        
        <category>security</category>
        
        <category>internet</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>I'm giving up on IM</title>
        <description>&lt;p&gt;I’ve been using XMPP as my primary IM protocol for years now. I’ve used a few
other things on the side, but I’ve always advertised it as my primary mean of
communication. And it’s really worked for a long time: lots of developers and
people in FLOSS circles use XMPP, and Google Talk federated as XMPP too, so
that worked for less tech-inclined users.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In recent years, I also ended up having to use Facebook’s IM a bit more as
well, since a lot of people I know &lt;em&gt;only&lt;/em&gt; used that to online communication. It
wasn’t a big hassle, since they used to expose their IM as XMPP too.&lt;/p&gt;

&lt;h2 id=&quot;xmpp-kinda-died&quot;&gt;XMPP kinda died&lt;/h2&gt;

&lt;p&gt;Yup, it’s time to admit it’s died. Even as a long time proponent of open,
federated protocols, &lt;em&gt;and&lt;/em&gt; XMPP, I can’t just deny the truth.&lt;/p&gt;

&lt;p&gt;These last few years, though, we’ve been going back to the dark ages: All these IM
providers closed up their networks behind unfederated (and sometimes
proprietary) protocols. Lots of new protocols/networks started appearing, and
people started migrating left and right to all of them.&lt;/p&gt;

&lt;p&gt;Most of these new protocols have only a subset of the features that XMPP had to
offer, but XMPP had a big problem: most features were optional extensions, and
finding a client that had them all, was non trivial. You then had to make sure
the other person was in the same situation.&lt;/p&gt;

&lt;p&gt;So convincing people that XMPP is superior is hard: the protocol and its
extensions &lt;em&gt;can&lt;/em&gt; offer more, but in reality, it’s not so superior (mostly due
to lack of client/server features, not the protocol itself).&lt;/p&gt;

&lt;p&gt;There’s no client I can recommend to people, and many Google Talk users have
moved on to Hangouts, which does not federate, and are thus, unreachable. Less
reachable people makes it hard to attract users, regardless of technical merit.&lt;/p&gt;

&lt;h2 id=&quot;theres-no-sucesor&quot;&gt;There’s no sucesor&lt;/h2&gt;

&lt;p&gt;But that’s not all of it. Even after giving up on free and open IM protocols,
and admitting you need to move elsewhere to keep in touch with fellow humans,
there’s really nowhere to go. People have moved to diverse IM networks, and
different groups of people use different things - and they’ll even claim “but
everyone uses XXX”, where XXX can be replaced by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hangouts&lt;/li&gt;
  &lt;li&gt;Facebook Messenger&lt;/li&gt;
  &lt;li&gt;Skype&lt;/li&gt;
  &lt;li&gt;Whatsapp&lt;/li&gt;
  &lt;li&gt;Lime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Note: This list goes on quite a bit. I just can’t be bothered to think further
about it).&lt;/p&gt;

&lt;p&gt;Telegram users are the only one who seem to admit that it’s not very popular,
but they chose it because they like it and/or it’s FLOSS and openly documented
(even though the protocol itself is unfederated). And there’s also quite a few
there.&lt;/p&gt;

&lt;p&gt;So basically, IM is back to where it was on 1999. Lots of islands with lots of
users in each, no single network where you can reach everybody, and closed
protocols which means no multi-protocol clients.&lt;/p&gt;

&lt;p&gt;Things like Pidgin (which I’ve used for around a decade) have stagnated, and
don’t support these newer proprietary protocols. The only solution seems to be
to keep open several browser webapps at all time, draining CPU and Battery. All
just in case somebody who’s on that particular network will try to reach me.&lt;/p&gt;

&lt;p&gt;Can I blame all those people? Not really. They couldn’t have chosen better.
XMPP failed marketing-wise, and the implementations are lacking, and there’s
not real decent second choice. People just fled to what looked nicer at the
time.&lt;/p&gt;

&lt;p&gt;The saddest part of all this, is that there’s no lesson to be learnt. It’s just
history repeating itself, and we’ll all pay the price for this in a few years
time.&lt;/p&gt;

&lt;p&gt;Maybe next time, we can educate people as to what happens with isolated
networks, proprietary protocols, and just picking what looks nicest. For now,
it’s either go with the flock, or stop talking to people around you.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Sep 2015 02:08:42 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2015/09/22/giving-up-on-im/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2015/09/22/giving-up-on-im/</guid>
        
        <category>rant</category>
        
        <category>im</category>
        
        <category>internet</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Start small, then grow</title>
        <description>&lt;p&gt;All of us developers who love what we do have started lots of side-projects.&lt;/p&gt;

&lt;p&gt;And almost all of us have equally as many side-projects abandoned on some
&lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; directory, rotting, with no hope of every achieving
completion. New projects are dumped there periodically, into a pit of
abandonment and decay.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I wanted to find my way out of this endless, and pointless loop. I &lt;em&gt;needed&lt;/em&gt; to
get things done, and make the best of my time.  Sure: it’s fun to start a new
project, but it’s even cooler to get it done and have something completed to
share with the world.&lt;/p&gt;

&lt;p&gt;I decided I’d do something that a so many people advise (and what lots of
companies do successfully, at some scale): make a very minimal program, with
the basic functionality, and grow from there.&lt;br /&gt;
We software engineers understand things perfectly well: maybe too well, so we
analyse and design very single aspect of a software program and design a huge
monster that would take ages to implement.&lt;/p&gt;

&lt;p&gt;I’d been needing a TODO manager for some time (talk about getting things
done!), so I though I’d do something that could write TODO events as
&lt;a href=&quot;https://tools.ietf.org/html/rfc5545&quot;&gt;icalendar&lt;/a&gt; files, and also list them.&lt;/p&gt;

&lt;p&gt;My old approach (and, I believe, the usual approach for developers) would have
been to list all the functionality, prepare a very complete model with all the
necessary features, contemplate dozens of edge use-cases, etc (this includes
supporting every single icalendar property, creation, deletion, copying, etc).&lt;/p&gt;

&lt;p&gt;I ignored my instinct, and started small: I wrote a small python script that
listed icalendar tasks from a directory, and then another script with a very
simple &lt;a href=&quot;http://urwid.org/reference/widget.html&quot;&gt;urwid&lt;/a&gt; interface to write new tasks.&lt;/p&gt;

&lt;p&gt;There, it worked. For the first time I had something I could &lt;em&gt;use&lt;/em&gt; (outside of
work, that is)! It’s hard to describe how pleasing this is to complete
something, even if a minor milestone.&lt;/p&gt;

&lt;p&gt;I used this inspiration to stay on track for a couple more hours to polish
these scripts, add a simple cli interface to them, a small settings file, some
documentation, and voilà: &lt;a href=&quot;/journal/2015/03/30/introducing-todoman/&quot;&gt;todoman&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Having something that &lt;em&gt;works&lt;/em&gt; increases motivation to continue working on it.
It’s a tool that I now use on a daily basis (and, apparently, a few other
people too). However, I feel that the greater achievement, was actually
getting something completely done. Reaching that 1.0 milestone (actually,
todoman is already at 1.2.1), and understanding how to develop side-projects in
future, without them ending in a pile of incomplete projects.&lt;/p&gt;

&lt;p&gt;Remember: start with a minimal working version, and grow from there. It doesn’t
matter how basic it is, small and functional is better than huge and
incomplete.&lt;/p&gt;

&lt;p&gt;Hopefully, this will be far from the last, and hopefully, this may help you
stop having incomplete side-projects, or hobby-projects dying all the time.&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Apr 2015 02:33:45 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2015/04/06/start-small-then-grow/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2015/04/06/start-small-then-grow/</guid>
        
        <category>development</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Introducing Todoman</title>
        <description>&lt;p&gt;Inspired on &lt;a href=&quot;http://www.getmemo.org/&quot;&gt;memo&lt;/a&gt; and &lt;a href=&quot;https://github.com/geier/khal/&quot;&gt;khal&lt;/a&gt;, &lt;strong&gt;&lt;a href=&quot;https://gitlab.com/hobarrera/todoman&quot;&gt;todoman&lt;/a&gt;&lt;/strong&gt; is a simple todo
manager, (or task manager), designed to take note and keep track of pending
tasks, that runs as a cli application on almost any Unix-like system (this
includes Linux, BSD and probably other OSs from the Unix family).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Todoman is MIT licensed and saves tasks as &lt;a href=&quot;https://tools.ietf.org/html/rfc5545&quot;&gt;icalendar&lt;/a&gt;, meaning you
can use a &lt;a href=&quot;http://en.wikipedia.org/wiki/CalDAV&quot;&gt;CalDav&lt;/a&gt;-complaiant too to sync your calendar (for example,
&lt;a href=&quot;https://github.com/untitaker/vdirsyncer&quot;&gt;vdirsyncer&lt;/a&gt;). You can also then sync this to your mobile phone,
tablet, or any other device with a CalDav-compliant client.&lt;/p&gt;

&lt;p&gt;Todoman has a very simple usage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todo
todo new
todo edit ID
todo show ID
todo done ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And images are worth a thousand words:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/journal/2015-03-30-introducing-todoman/todoman-1.jpeg&quot; alt=&quot;Screenshot of the main view.&quot; style=&quot;width: auto;&quot; /&gt;
  &lt;figcaption&gt;Sample output of running &lt;code&gt;todo&lt;/code&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Exclamation marks indicate urgent (high priority) tasks. All the rest is pretty
self-explanatory.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/journal/2015-03-30-introducing-todoman/todoman-2.jpeg&quot; alt=&quot;Screenshot of the edition view.&quot; style=&quot;width: auto;&quot; /&gt;
  &lt;figcaption&gt;The todo edition screen; sample output of running &lt;code&gt;todo edit 1&lt;/code&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The source code is available at &lt;a href=&quot;https://gitlab.com/hobarrera/todoman&quot;&gt;its repository&lt;/a&gt; and a &lt;a href=&quot;https://github.com/hobarrera/todoman&quot;&gt;github&lt;/a&gt;
mirror. Go ahead and try it now:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://git.barrera.io/hobarrera/todoman/repository/archive.tar.gz&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;ref&lt;span class=&quot;se&quot;&gt;\=&lt;/span&gt;v1.2.0 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; todoman.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzf&lt;/span&gt; v1.1.0.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;todoman.git/

&lt;span class=&quot;c&quot;&gt;# python setup.py install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll also need to copy and update the configuration file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt;  ~/.config/todoman/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;todoman.conf.sample ~/.config/todoman/todoman.conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim ~/.config/todoman/todoman.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s also already a &lt;a href=&quot;https://aur.archlinux.org/packages/todoman/&quot;&gt;package&lt;/a&gt; for ArchLinux.&lt;/p&gt;

&lt;p&gt;Feedback is welcome, especially bug reports, which you can email, comment, or
&lt;a href=&quot;https://gitlab.com/hobarrera/todoman/issues&quot;&gt;open a issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated 2015-03-31:&lt;/strong&gt;&lt;br /&gt;
Link above now points to release 1.2.0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated on 2015-08-30:&lt;/strong&gt;&lt;br /&gt;
Todoman has moved to &lt;a href=&quot;https://gitlab.com/hobarrera/todoman&quot;&gt;gitlab.com&lt;/a&gt;, rather than my own hosted
instance. The above links have been updated.&lt;/p&gt;

&lt;p&gt;It’s also been available via PyPI for some time now, so may also be
installed running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install todoman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 30 Mar 2015 13:57:23 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2015/03/30/introducing-todoman/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2015/03/30/introducing-todoman/</guid>
        
        <category>unix</category>
        
        <category>getting things done</category>
        
        <category>caldav</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Open source your website</title>
        <description>&lt;p&gt;Unless your business’s value is actually on your website code itself, there’s
little reason not to share your site’s code.&lt;/p&gt;

&lt;p&gt;I understand why facebook or gmail won’t release the code to their site (I
understand, without condemning nor condoning), but if you’ve got a blog, an
institutional website, a three-page site that merely links to “download our
app”, there’s little reason &lt;em&gt;not&lt;/em&gt; to share the source with the public.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;All of us web developers (or just curious designers) have come across some site
and wondered “Hmm, wonder how they did X and Y with just jekyll”, or wondered
what plugin they used on Z platform to achieve something.&lt;/p&gt;

&lt;p&gt;For example, I’ve followed &lt;a href=&quot;http://paulstamatiou.com/&quot;&gt;@Stammy&lt;/a&gt;’s articles for
ages, and as the site change, I’ve more than once wondered how certain details
were done with Jekyll (he’s mentioned once that he’s using jekyll to generate
it). Sure, I could have search online for a while and would eventually find it,
but if I’m already at a site, it would be pretty nice to just be able to dig up
its source and see that immeditaly.&lt;/p&gt;

&lt;p&gt;I’ve shared my site’s code even though it’s rather poor from the start. The
reason? Someone might wonder how a small site like this is layed out using
jekyll, or how I placed X and Y pieces together. Someone wanting to learn from
example has yet another working one too. I won’t get less job if somebody finds
out how I do this stuff. It’s no easier to steal my (rather poor) design
either. But it might make someone’s like slightly easier.&lt;/p&gt;

&lt;p&gt;And of course, we all probably use &lt;a href=&quot;http://www.git-scm.com/&quot;&gt;git&lt;/a&gt;, or something
alike to keep track of our website anyway (if not: what are you waiting for!?),
so why not just flip a switch and make that repo public.&lt;/p&gt;

&lt;p&gt;Do &lt;em&gt;you&lt;/em&gt; have a reason why you need to keep your site’s source secret?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A final note: this line of though came to me today when working on a small
website for a client, that’s basically a few pages that show some stats, and a
link to their app. When I asked “Why’s the repository for it public? It only
uses your public API that you want other devs to use anyway.” his answer was
he’d think about it.&lt;/p&gt;

&lt;p&gt;Maybe it’s time to turn the “open by default” switch on for these sort of
things?&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Mar 2015 17:15:28 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2015/03/17/open-source-your-website/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2015/03/17/open-source-your-website/</guid>
        
        <category>open source</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Opensmtpd and dovecot with a shared SQL database</title>
        <description>&lt;p&gt;This article will describes how to achieve a flexible and scalable email setup
using opensmtpd and dovecot. For single-user or single-domain setups, this is
an overkill, but feel free to read ahead, you may still find something useful.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I’ve used opensmtpd and dovecot for years now, and have been hosting email for
several domains for a large portion of that time.&lt;/p&gt;

&lt;p&gt;For small sites the text-based backends work fine, however, as the amount of
users, domains and virtual users grows, it’s not easy to keep track. Data needs
to be duplicated between smtpd’s credentials table, the virtual users table,
and dovecot’s mailbox table.&lt;/p&gt;

&lt;p&gt;I finally decided it was time to consolidate all the data in one place. I chose
sqlite to begin with, but this can be moved onto postgresql if it needs to
scale even more.&lt;/p&gt;

&lt;h2 id=&quot;opensmtpd-and-dovecot-interaction&quot;&gt;Opensmtpd and dovecot interaction&lt;/h2&gt;

&lt;p&gt;If you attemp to use virtualusers (and you’ll want to if you’re handling many
users in many domains), when receiving emails, opensmtpd maps email addresses
to usernames (which can contain no &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; sign).  Dovecot then stores emails in
mailboxes based on these usernames. Both these things make mapping many virtual
users from different domains a bit compex.&lt;/p&gt;

&lt;p&gt;I decided that the usernames I’ll be mapping to will take the form of
&lt;code class=&quot;highlighter-rouge&quot;&gt;username_domain&lt;/code&gt; (eg: &lt;code class=&quot;highlighter-rouge&quot;&gt;hugo_barrera.io&lt;/code&gt;). This makes a few initial settings a
bit complicated, but is infinitely flexible (the underscore sign in illegal for
email addresses, so there’s no change for collision).&lt;/p&gt;

&lt;h2 id=&quot;database-schema&quot;&gt;Database schema&lt;/h2&gt;

&lt;p&gt;I designed two database schemas, a normalized one, and a single-table one. I
decided to keep the latter, since it makes inserts simpler &lt;em&gt;and&lt;/em&gt; it’s easier
to show-and-tell, but if you read through this entire article, you’ll be able
to use whatever tableset you like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mailbox&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Passwords are blowfish encrypted. Opensmtpd uses this by default and dovecot
also supports this (it refers to this scheme as &lt;code class=&quot;highlighter-rouge&quot;&gt;BLF-CRYPT&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In different contexts, each column is used for something different:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For email submission &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;domain&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; are used to validate
authentication. The usernames smtpd receives from the client take the form of
&lt;code class=&quot;highlighter-rouge&quot;&gt;hugo@barrera.io&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Opensmtpd needs to know what domains it’s receiving emails for. For this, it
just sees if there’s &lt;em&gt;any&lt;/em&gt; entry in the &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; table where this domain is
present. It would make no sense to keep a separate list of domains: if
there’s no address for a domain, then I’re not accepting email for this
domain.&lt;/li&gt;
  &lt;li&gt;For email receiption, &lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain&lt;/code&gt; is used to map to the recipient mailbox
(ie: the &lt;code class=&quot;highlighter-rouge&quot;&gt;mailbox&lt;/code&gt; column). Several addresses can map to a single user, and
wildcards can also be used too. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; is replaced with an &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; when querying
this table as well.&lt;/li&gt;
  &lt;li&gt;For dovecot’s authentication, it needs to know if &lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain&lt;/code&gt; is a real
user, or just an aliased address. This is simply determined by checking if
&lt;code class=&quot;highlighter-rouge&quot;&gt;password != NULL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passwords should be encrypted using either &lt;code class=&quot;highlighter-rouge&quot;&gt;doveadm pw -s BLF-CRYPT&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;smtpctl encrypt&lt;/code&gt;. The output of both seems interchangeable.&lt;/p&gt;

&lt;h2 id=&quot;dkim&quot;&gt;DKIM&lt;/h2&gt;

&lt;p&gt;DKIM signing is done with DKIMProxy. There’s a bunch of examples out there, so
I won’t go into detail about that. Basically, opensmtp will send emails to
DKIMProxy, accepts them back, tags them, and then relays them out.&lt;/p&gt;

&lt;h2 id=&quot;opensmtpd-configuration&quot;&gt;Opensmtpd configuration&lt;/h2&gt;

&lt;p&gt;First of all, we need to configure opensmtpd to receive email and read all the
data from the sqlite database. Here’s my &lt;code class=&quot;highlighter-rouge&quot;&gt;smtpd.conf&lt;/code&gt; as a reference:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# === TLS Certificates === #
pki mx1.barrera.io certificate &quot;/path/to/certs/mx1.barrera.io.crt&quot;
pki mx1.barrera.io key         &quot;/path/to/certs/mx1.barrera.io.key&quot;

pki smtp.barrera.io certificate &quot;/path/to/certs/smtp.barrera.io.crt&quot;
pki smtp.barrera.io key         &quot;/path/to/certs/smtp.barrera.io.key&quot;

# === Tables === #
table domains sqlite:/etc/mail/sqlite.conf
table virtuals sqlite:/etc/mail/sqlite.conf
table userinfo sqlite:/etc/mail/sqlite.conf
table credentials sqlite:/etc/mail/sqlite.conf

# === Listen === #

listen on lo0
listen on lo0 port 10028 tag DKIM
listen on egress port smtp       tls                            hostname &quot;mx1.barrera.io&quot;
listen on egress port submission tls-require auth &amp;lt;credentials&amp;gt; hostname &quot;smtp.barrera.io&quot;

# === Handle Messages === #

accept from any for local virtual &amp;lt;virtuals&amp;gt; \
  userbase &amp;lt;userinfo&amp;gt; deliver to lmtp &quot;/var/dovecot/lmtp&quot;

accept from any for domain &amp;lt;domains&amp;gt; virtual &amp;lt;virtuals&amp;gt; \
  userbase &amp;lt;userinfo&amp;gt; deliver to lmtp &quot;/var/dovecot/lmtp&quot;

# === Sign/relay === #
accept tagged DKIM for any relay
accept for any relay via smtp://127.0.0.1:10027&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is all rather self-explanatory if you’re familiar with &lt;code class=&quot;highlighter-rouge&quot;&gt;smtpd.conf&lt;/code&gt;’s
sytax. I use lmtp via a unix socket because I believe it’s slightly faster, but
a network socket works fine too.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite.conf&lt;/code&gt; is a bit more complex:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dbpath                  /etc/mail/smtpd.sqlite
query_credentials       SELECT username||'@'||domain, password FROM users WHERE (username||'@'||domain)=?;
query_domain            SELECT domain FROM users WHERE domain=? LIMIT 1;
query_userinfo          SELECT 7000, 7000, '/var/empty' FROM users WHERE (username||'_'||domain)=?;
query_alias             SELECT replace(mailbox, '@', '_') FROM users WHERE ? LIKE (username||'@'||domain);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query_credentials&lt;/code&gt; is used to validate user credentials. Opensmtpd will pass
the provided email (in the form of username@domain), and this will find
mapping rows. Since aliases have &lt;code class=&quot;highlighter-rouge&quot;&gt;password = NULL&lt;/code&gt;, those rows will return
false.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query_domain&lt;/code&gt; is used when querying if we receive emails for a domain or
not. The logic is rather simple: if there’s an address for a domain, then
we accept email for it and viceversa.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query_userinfo&lt;/code&gt; is used for email delivery, and to check if a mailbox
exists. If there’s a mapping for it, then it exists.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query_alias&lt;/code&gt; returns the &lt;code class=&quot;highlighter-rouge&quot;&gt;mailbox&lt;/code&gt; for a &lt;code class=&quot;highlighter-rouge&quot;&gt;username@domain&lt;/code&gt;, as
described above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the smtpd side, that’s basically it. Here’s some sample data:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hugo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'barrera.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hugo@barrera.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2b$08$CEWRsxzLeTziYlq58gJvd.35RQ0fK2jP9RW8AisoxAznmmN6GsdvK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'barrera.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hugo@barrera.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'contact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'contact@example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2b$08$CEWRsxzLeTziYlq58gJvd.35RQ0fK2jP9RW8AisoxAznmmN6GsdvK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hugo@barrera.io&lt;/code&gt; is an actual mailbox. It’ll get emails for himself, or
anyone matching &lt;code class=&quot;highlighter-rouge&quot;&gt;%@barrera.io&lt;/code&gt; (remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; is the SQL wildcard
character).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contact@example.com&lt;/code&gt; is another mailbox. That user will get email sent to
him and just that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re going to have several overlapping delivery patterns, you probably
want to have a priority column in the table, and add &lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY priority&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT 1&lt;/code&gt; to some queries.&lt;/p&gt;

&lt;h2 id=&quot;dovecot&quot;&gt;Dovecot&lt;/h2&gt;

&lt;p&gt;Dovecot includes &lt;code class=&quot;highlighter-rouge&quot;&gt;conf.d/auth-sql.conf.ext&lt;/code&gt;. I’ve modified it as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mail_location = maildir:~/Maildir

passdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf.ext
}

userdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf.ext
  override_fields = uid=vmail gid=vmail
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mail_location&lt;/code&gt; tell dovecot where relative to the user’s home the email is,
and to use maildir. You can change this as you prefer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;override_fields&lt;/code&gt; tells dovecot that email is always handled by the uid/gid
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmail:vmail&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other values are the defaults. Of course, &lt;code class=&quot;highlighter-rouge&quot;&gt;dovecot-sql.conf.ext&lt;/code&gt; 
does require more changes so as to retrieve user data from the shared SQL
database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;driver = sqlite
connect = /etc/mail/smtpd.sqlite
default_pass_scheme = BLF-CRYPT

password_query = \
  SELECT password \
  FROM users \
  WHERE mailbox = replace('%u', '_', '@') AND password NOT NULL

user_query = \
  SELECT '/home/vmail/'||domain||'/'||username AS home \
  FROM users \
  WHERE mailbox = replace('%u', '_', '@') AND password NOT NULL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; needs to point to the same db that smtpd is using.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_pass_scheme&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be &lt;code class=&quot;highlighter-rouge&quot;&gt;BLF-CRYPT&lt;/code&gt; since that’s what smtpd uses.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password_query&lt;/code&gt; is used to authenticate users (eg: those attempting to open
their IMAP mailbox).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user_query&lt;/code&gt; is used in two scenarios:
    &lt;ol&gt;
      &lt;li&gt;To determine where to  deliver messages destined to &lt;code class=&quot;highlighter-rouge&quot;&gt;user_domain&lt;/code&gt;. This is
  done by finding the real user who owns this mailbox (password &lt;em&gt;must&lt;/em&gt; be
  null for aliased mailboxes!).&lt;/li&gt;
      &lt;li&gt;To determine what messages to serve to a user reading his email (eg: via
  IMAP). In this case, the usernames have the format of &lt;code class=&quot;highlighter-rouge&quot;&gt;user@domain&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;Setting the whole thing up is a bit complicated, but adding new users is a
breeze. If there’s a need to grow, the sqlite db can become a postgresql db. By
using lmtp, dovecot and opensmtpd can move into different machines, giving even
more scalability.
Further scaling, however, will require multiple dovecot backend and some
changes to the sql schema.&lt;/p&gt;

&lt;p&gt;Please feel free to point out any issues, potential improvements, or comments,
I’ll try to update this appropiately.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Feb 2015 15:04:03 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2015/02/15/opensmtpd-dovecot-shared-sql-db/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2015/02/15/opensmtpd-dovecot-shared-sql-db/</guid>
        
        <category>opensmtpd</category>
        
        <category>dovecot</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>Performing backups the right way</title>
        <description>&lt;p&gt;For years I’ve had a single task on my TO-DO list: backup photos. I had an awful solution years ago, and only recently did a permanent, proper solution.&lt;/p&gt;

&lt;p&gt;Doing backups the right way means taking several items into consideration, and should not be done lightly. Trusting poor backup solutions will result in a false sense of security where you might loose everything suddenly, and not even realize it until it’s too late!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;These are items you should keep in mind when designing your backup solution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;&lt;br /&gt;
 Backups that require manual internention are backups that you’ll forget to perform. Period. Backups need to be automated as much as possible so as to be sure to always have a very recent one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Transparent&lt;/strong&gt;&lt;br /&gt;
 Backups shouldn’t be a hastle to my everyday life. A popup every day at any time is a PITA, and needless. and will most likely end up in me disabling the process permanently. I don’t really need a “everything is working fine” popup anyway, which leads me to:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fail-safe&lt;/strong&gt;&lt;br /&gt;
 If anything goes wrong, I need to be aware of it ASAP. Ideally, I need an email notification of what went wrong and as much information as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;&lt;br /&gt;
 Particularly, in space. I’ve 17GiB worth of photos (including family photos, etc). I want a snapshot of each day’s files easily accesible, but don’t want to use up 170GiB in just 10 days by brute-copying everything.&lt;br /&gt;
 I also want the bandwidth usage to be efficient, since I usually pay for it and/or it interferes with my actual bandwidth availability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Maintainable&lt;/strong&gt;&lt;br /&gt;
 Or, to put it another way: &lt;em&gt;simplicity&lt;/em&gt;.  Huge scripts mixing dozen of applications may work, but in a weeks time, I’ll forget how it works, and will be unable maintain it, reuse it, and, worst of all, fix it if it breaks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Secure&lt;/strong&gt;&lt;br /&gt;
 Everything needs to be transfered securely. Dead simple.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-did&quot;&gt;What I did&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;, &lt;strong&gt;transparency&lt;/strong&gt; and &lt;strong&gt;fail-safe&lt;/strong&gt; are all covered by using &lt;code class=&quot;highlighter-rouge&quot;&gt;cron&lt;/code&gt;. My backups run on a daily basis, in case of error cron emails the output, and it does not in any way interfere with my work at all.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cron&lt;/code&gt; sends an email to the current user with the output of what it runs. My backup script is silent in case of success, but will leak all errors to &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, which &lt;code class=&quot;highlighter-rouge&quot;&gt;cron&lt;/code&gt; will then email to me. By simple creating an MX record for my machine’s hostname, and an alias on my mail server, I get an email in my inbox if anything goes wrong.&lt;br /&gt;
If you don’t have your own domain (or don’t control the host’s domain), you can set up a local &lt;a href=&quot;https://opensmtpd.org/&quot;&gt;smtpd server&lt;/a&gt;, and forward the emails to yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency&lt;/strong&gt; is covered by &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; is really efficient when it comes to bandwidth usage by only transfering chages over the network and not the entire 17GiB.&lt;br /&gt;
As for disk-usage, by using the the &lt;code class=&quot;highlighter-rouge&quot;&gt;--link-dest&lt;/code&gt; flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; creates the directory tree for each day, but hardlinks files which have not been altered since the previous day. The result is a 3.4MiB usage increase per day, but the entire file tree for each day available. I can also randomly delete any day, and all other backups are unaffected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; is also covered by &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt;, by simply making it use &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; for transfers (which is actually the default). If you use ssh of course, you’ll have to create a special ssh key pair, and make the private key available to cron, unencrypted. You’ll probably want full-disk encryption to protect it.&lt;/p&gt;

&lt;p&gt;As for &lt;strong&gt;Maintainability&lt;/strong&gt;, I had to deal with that myself. Instead of over-complicated solutions, I wrote a 26-line shell script, of which 6 lines are actually whitespace, and 13 are comments. Pretty easy to maintain.&lt;/p&gt;

&lt;h2 id=&quot;how-i-did-it&quot;&gt;How I did it&lt;/h2&gt;

&lt;p&gt;First of all, here’s the above mentioned script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Backs up photos into the fileserver.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Pre-existing files are hardlinked to yesterday's copy, so the size&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# increase equals the size of new files, while keeping daily snapshots.&lt;/span&gt;
 
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Since other scripts sync cron tasks across machines, I want to make sure&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this one only runs on hyperion&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; hyperion &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SSH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssh -i &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.ssh/backup@hades&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REMOTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;backup@hades.barrera.io
&lt;span class=&quot;nv&quot;&gt;TODAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Using -H is too expensive, and I don't use hardlinks in this directory.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use -x to avoid copying .enc.mount directories (fuse-mounted encrypted&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# data).&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Sync the files:&lt;/span&gt;
rsync &lt;span class=&quot;nt&quot;&gt;-aqx&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SSH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; /home/hugo/photos/ &lt;span class=&quot;nv&quot;&gt;$REMOTE&lt;/span&gt;:data/photos/&lt;span class=&quot;nv&quot;&gt;$TODAY&lt;/span&gt;/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--link-dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../latest/

&lt;span class=&quot;c&quot;&gt;# Link today's as latest:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$SSH&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$REMOTE&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rm data/photos/latest &amp;amp;&amp;amp; ln -sf &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TODAY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; data/photos/latest&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Stupidly simple, right?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 8 make sure the script bails upon error instead of continuing (ie: whenever something exists non-zero).&lt;/li&gt;
  &lt;li&gt;Line 14 forces ssh to use a specific ssh key which has been added on the host with very limited permissions, and only for the user “backup”, who owns backups and nothing else. Nobody else has access to &lt;code class=&quot;highlighter-rouge&quot;&gt;backup&lt;/code&gt;’s files either.&lt;/li&gt;
  &lt;li&gt;Line 23 does the actual copying. The files are copied to data/photos/2014-08-06, with hardlinks to ../latest (on the server side). As you’ll see in a moment, latest is a symlink to the latest &lt;em&gt;successfull&lt;/em&gt; backup (the very first day, it was an empty directory, of course).&lt;/li&gt;
  &lt;li&gt;Line 27 updated the symlink latest to point to today’s backup (the script would have bailed if there had been an error). Tomorrow, the files will be compared to today’s files to determine what’s changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, of course, the single line in &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;35   5    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;    /bin/sh /home/hugo/.config/cron/scripts/backup-photos.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A final item was securing the backup. I own the destination server, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; for user &lt;code class=&quot;highlighter-rouge&quot;&gt;backup&lt;/code&gt; is mounted onto an encrypted drive. Should that server reboot, I’d get an email, and would need to log in and re-mount that drive manually. This may result in a single backup failing, but I would get &lt;strong&gt;2&lt;/strong&gt; emails if it came to that. And a server having been offline is an indicator of a more serious problem.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Aug 2014 20:33:45 +0000</pubDate>
        <link>https://hugo.barrera.io/journal/2014/08/06/backups-the-right-way/</link>
        <guid isPermaLink="true">https://hugo.barrera.io/journal/2014/08/06/backups-the-right-way/</guid>
        
        <category>backups</category>
        
        <category>unix</category>
        
        
        <category>journal</category>
        
      </item>
    
  </channel>
</rss>
